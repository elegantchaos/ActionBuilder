import XCTest
import XCTestExtensions

@testable import ActionBuilderCore

final class ActionBuilderCoreTests: XCTestCase {
    func testParsingPackageMacPlatform() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-mac", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.enabledCompilers.map { $0.id }, [.swift56, .swift57 ])
        XCTAssertEqual(repo.enabledPlatforms.map { $0.id }, [.linux, .macOS])
    }

    func testParsingPackageMultiPlatform() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-multi", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.compilers, [.swift56, .swiftLatest])
        XCTAssertEqual(repo.platforms, [.iOS, .linux, .macOS, .tvOS])
    }

    func testParsingPackageConfigFile() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-config", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.name, "ConfigTestPackage")
        XCTAssertEqual(repo.owner, "ConfigTestOwner")
        XCTAssertEqual(repo.compilers, [.swift55, .swiftNightly])
        XCTAssertEqual(repo.platforms, [.macOS, .linux])
        XCTAssertEqual(repo.testMode, .test)
        XCTAssertFalse(repo.header)
        XCTAssertFalse(repo.uploadLogs)
        XCTAssertFalse(repo.postSlackNotification)
        XCTAssertFalse(repo.firstlast)
    }

    func testYAMLmacOSSwift56() {
        let expected = """
            # --------------------------------------------------------------------------------
            # This workflow was automatically generated by Test Generator 1.2.3 (456).
            # (see https://test.com for more details)
            # --------------------------------------------------------------------------------

            name: Tests

            on: [push, pull_request]

            jobs:
            
                macOS-swift56:
                    name: macOS (Swift 5.6)
                    runs-on: macos-12
                    steps:
                    - name: Checkout
                      uses: actions/checkout@v1
                    - name: Make Logs Directory
                      run: mkdir logs
                    - name: Xcode Version
                      run: |
                        ls -d /Applications/Xcode*
                        sudo xcode-select -s /Applications/Xcode_13.4.1.app
                        xcodebuild -version
                        swift --version
                    - name: Swift Version
                      run: swift --version
                    - name: Test (release)
                      run: swift test --configuration release -Xswiftc -enable-testing
                    - name: Upload Logs
                      uses: actions/upload-artifact@v1
                      if: always()
                      with:
                        name: logs
                        path: logs
            
            """
        
        let generator = Generator(name: "Test Generator", version: "1.2.3 (456)", link: "https://test.com")
        let repo = Repo(name: "testRepo", owner: "testOwner", platforms: [.macOS], compilers: [.swift56])
        
        let source = generator.workflow(for: repo)
        XCTAssertEqual(source, expected)
    }

//    func testYAMLiOSSwift56() {
//        let expected = """
//            # --------------------------------------------------------------------------------
//            # This workflow was automatically generated by Test Generator 1.2.3 (456).
//            # (see https://test.com for more details)
//            # --------------------------------------------------------------------------------
//
//            name: Tests
//
//            on: [push, pull_request]
//
//            jobs:
//
//                macOS-swift56:
//                    name: macOS (Swift 5.6)
//                    runs-on: macos-12
//                    steps:
//                    - name: Checkout
//                      uses: actions/checkout@v1
//                    - name: Make Logs Directory
//                      run: mkdir logs
//                    - name: Xcode Version
//                      run: |
//                        ls -d /Applications/Xcode*
//                        sudo xcode-select -s /Applications/Xcode_13.4.1.app
//                        xcodebuild -version
//                        swift --version
//                    - name: Swift Version
//                      run: swift --version
//                    - name: Test (release)
//                      run: swift test --configuration release -Xswiftc -enable-testing
//                    - name: Upload Logs
//                      uses: actions/upload-artifact@v1
//                      if: always()
//                      with:
//                        name: logs
//                        path: logs
//
//            """
//        
//        let generator = Generator(name: "Test Generator", version: "1.2.3 (456)", link: "https://test.com")
//        let repo = Repo(name: "testRepo", owner: "testOwner", platforms: [.iOS], compilers: [.swift56])
//
//        let source = generator.workflow(for: repo)
//        XCTAssertEqual(source, expected)
//    }

}

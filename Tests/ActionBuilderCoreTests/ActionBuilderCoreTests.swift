import XCTest
import XCTestExtensions

@testable import ActionBuilderCore

final class ActionBuilderCoreTests: XCTestCase {
    func testParsingPackageMacPlatform() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-mac", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.compilers, [.swift56])
        XCTAssertEqual(repo.platforms, [.macOS])
    }

    func testParsingPackageMultiPlatform() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-multi", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.compilers, [.swift56])
        XCTAssertEqual(repo.platforms, [.iOS, .macOS, .tvOS])
    }

    func testParsingPackageConfigFile() throws {
        let examplePackage = Bundle.module.url(forResource: "Example-config", withExtension: "package")!
        let repo = try Repo(forPackage: examplePackage)
        XCTAssertEqual(repo.compilers, [.swift55, .swiftNightly])
        XCTAssertEqual(repo.platforms, [.macOS, .linux])
        XCTAssertTrue(repo.test)
        XCTAssertFalse(repo.header)
        XCTAssertFalse(repo.uploadLogs)
        XCTAssertFalse(repo.postSlackNotification)
        XCTAssertFalse(repo.firstlast)
    }

    func testYAMLmacOSSwift56() {
        let expected = """
            # --------------------------------------------------------------------------------
            # This workflow was automatically generated by Test Generator 1.2.3 (456).
            # (see https://test.com for more details)
            # --------------------------------------------------------------------------------

            name: Tests

            on: [push, pull_request]

            jobs:
            
                macOS-swift56:
                    name: macOS (Swift 5.6)
                    env:
                        TOOLCHAINS: swift
                    runs-on: macos-11
                    steps:
                    - name: Checkout
                      uses: actions/checkout@v1
                    - name: Make Logs Directory
                      run: mkdir logs
                    - name: Install Toolchain
                      run: |
                        wget --quiet https://download.swift.org/swift-5.6.1-release/xcode/swift-5.6.1-RELEASE/swift-5.6.1-RELEASE-osx.pkg
                        sudo installer -pkg swift-5.6.1-RELEASE-osx.pkg -target /
                        ln -s "/Library/Developer/Toolchains/swift-5.6.1-RELEASE.xctoolchain/usr/bin" swift-latest
                        ls -d /Applications/Xcode*
                        sudo xcode-select -s /Applications/Xcode_13.2.1.app
                        swift --version
                    - name: Xcode Version
                      run: |
                        xcodebuild -version
                        xcrun swift --version
                    - name: Swift Version
                      run: swift --version
                    - name: Test (release)
                      run: export PATH="swift-latest:$PATH"; swift test --configuration release -Xswiftc -enable-testing --enable-test-discovery
                    - name: Upload Logs
                      uses: actions/upload-artifact@v1
                      if: always()
                      with:
                        name: logs
                        path: logs
            
            """
        
        let generator = Generator(name: "Test Generator", version: "1.2.3 (456)", link: "https://test.com")
        let repo = Repo(name: "testRepo", owner: "testOwner", platforms: [.macOS], compilers: [.swift56])
        
        let source = generator.workflow(for: repo)
        XCTAssertEqual(source, expected)
    }

    func testYAMLiOSSwift56() {
        let expected = """
            # --------------------------------------------------------------------------------
            # This workflow was automatically generated by Test Generator 1.2.3 (456).
            # (see https://test.com for more details)
            # --------------------------------------------------------------------------------
            
            name: Tests
            
            on: [push, pull_request]
            
            jobs:
            
                xcode-swift56:
                    name: iOS (Swift 5.6, Xcode 13.2.1)
                    env:
                        TOOLCHAINS: swift
                    runs-on: macos-11
                    steps:
                    - name: Checkout
                      uses: actions/checkout@v1
                    - name: Make Logs Directory
                      run: mkdir logs
                    - name: Install Toolchain
                      run: |
                        wget --quiet https://download.swift.org/swift-5.6.1-release/xcode/swift-5.6.1-RELEASE/swift-5.6.1-RELEASE-osx.pkg
                        sudo installer -pkg swift-5.6.1-RELEASE-osx.pkg -target /
                        ln -s "/Library/Developer/Toolchains/swift-5.6.1-RELEASE.xctoolchain/usr/bin" swift-latest
                        ls -d /Applications/Xcode*
                        sudo xcode-select -s /Applications/Xcode_13.2.1.app
                        swift --version
                    - name: Xcode Version
                      run: |
                        xcodebuild -version
                        xcrun swift --version
                    - name: XC Pretty
                      run: sudo gem install xcpretty-travis-formatter
                    - name: Detect Workspace & Scheme (iOS)
                      run: |
                        WORKSPACE="testRepo.xcworkspace"
                        if [[ ! -e "$WORKSPACE" ]]
                        then
                        WORKSPACE="."
                        GOTPACKAGE=$(xcodebuild -workspace . -list | (grep testRepo-Package || true))
                        if [[ $GOTPACKAGE != "" ]]
                        then
                        SCHEME="testRepo-Package"
                        else
                        SCHEME="testRepo"
                        fi
                        else
                        SCHEME="testRepo-iOS"
                        fi
                        echo "set -o pipefail; export PATH='swift-latest:$PATH'; WORKSPACE='$WORKSPACE'; SCHEME='$SCHEME'" > setup.sh
                    - name: Build (iOS release)
                      run: |
                        source "setup.sh"
                        echo "Building workspace $WORKSPACE scheme $SCHEME."
                        xcodebuild clean build -workspace "$WORKSPACE" -scheme "$SCHEME" -destination "name=iPhone 11" -configuration Release CODE_SIGN_IDENTITY="" CODE_SIGNING_REQUIRED=NO ENABLE_TESTABILITY=YES | tee logs/xcodebuild-iOS-build-release.log | xcpretty
                    - name: Upload Logs
                      uses: actions/upload-artifact@v1
                      if: always()
                      with:
                        name: logs
                        path: logs
            
            """
        
        let generator = Generator(name: "Test Generator", version: "1.2.3 (456)", link: "https://test.com")
        let repo = Repo(name: "testRepo", owner: "testOwner", platforms: [.iOS], compilers: [.swift56])
        
        let source = generator.workflow(for: repo)
        XCTAssertEqual(source, expected)
    }

}

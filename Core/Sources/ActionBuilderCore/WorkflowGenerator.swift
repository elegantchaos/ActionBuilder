// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-
//  Created by Sam Deane on 19/02/20.
//  All code (c) 2020 - present day, Elegant Chaos Limited.
// -=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-=-

import Foundation

public class WorkflowGenerator {
    let name: String
    let version: String
    let link: String

    public init(name: String, version: String, link: String) {
        self.name = name
        self.version = version
        self.link = link
    }
    
    public struct Output {
        public let repo: RepoDetails
        public let source: String
        public let data: Data
        public let header: String
        public let delimiter: String
    }

    public let general = [
        Option("test", name: "Run Tests"),
        Option("firstlast", name: "Check Oldest and Newest Swift Only"),
        Option("notify", name: "Post Notifications"),
        Option("upload", name: "Upload Logs"),
        Option("header", name: "Add a header to README.md")
    ]
    
    
    public func toggleSet(for options: [Option], in settings: WorkflowSettings) -> [Bool] {
        var toggles: [Bool] = []
        for option in options {
            toggles.append(settings.options.contains(option.id))
        }
        return toggles
    }
    
    public func enabledIdentifiers(for options: [Option], toggleSet toggles: [Bool]) -> [String] {
        var identifiers: [String] = []
        for n in 0 ..< options.count {
            if toggles[n] {
                identifiers.append(options[n].id)
            }
        }
        return identifiers
    }
    
    func generateYAML(for repo: RepoDetails, platforms: [Platform], compilers: [Compiler]) -> String {
        
        var source =
         """
         # --------------------------------------------------------------------------------
         # This workflow was automatically generated by \(name) \(version).
         # (see \(link) for more details)
         # --------------------------------------------------------------------------------
         
         name: \(repo.workflow)
         
         on: [push, pull_request]
         
         jobs:
         
         """
         
        var xcodePlatforms: [Platform] = []
        let configurations = repo.settings.enabledConfigs
        for platform in platforms {
            if platform.xcodeDestination == nil {
                source.append(platform.yaml(repo: repo, compilers: compilers, configurations: configurations))
            } else {
                xcodePlatforms.append(platform)
            }
        }
        
        if xcodePlatforms.count > 0 {
            let name = xcodePlatforms.map({ $0.name }).joined(separator: "/")
            let xcodePlatform = Platform("xcode", name: name, subPlatforms: xcodePlatforms)
            source.append(xcodePlatform.yaml(repo: repo, compilers: compilers, configurations: configurations))
        }
        
        return source
    }
     
     func generateHeader(for repo: RepoDetails, platforms: [Platform], compilers: [Compiler]) -> (String, String) {
         var header = ""
         let headerDelimiter = "[comment]: <> (End of \(name) Header)\n\n"
         if repo.settings.header {
             let platformNames = platforms.map({ $0.name }).joined(separator: ", ")
             let platformIDs = platforms.map({ $0.name })
             let swiftBadges = compilers.map({ "![swift \($0.short) shield]" }).joined(separator: " ")
             let swiftShields = compilers.map({ "[swift \($0.short) shield]: \(ImageShield.imgShieldURL(for: repo, compiler: $0)) \"Swift \($0.short)\"" }).joined(separator: "\n")

             header += """
                 [comment]: <> (Header Generated by \(name) \(version))
                 
                 [![Test results][tests shield]][actions] [![Latest release][release shield]][releases] [\(swiftBadges)][swift] ![Platforms: \(platformNames)][platforms shield]

                 [release shield]: \(ImageShield.imgShieldURL(for: repo, type: .release))
                 [platforms shield]: \(ImageShield.imgShieldURL(for: repo, platforms: platformIDs)) "\(platformNames)"
                 [tests shield]: \(GitHub.githubURL(for: repo, location: .badge("")))
                 \(swiftShields)

                 [swift]: https://swift.org
                 [releases]: \(GitHub.githubURL(for: repo, location: .releases))
                 [actions]: \(GitHub.githubURL(for: repo, location: .actions))

                 \(headerDelimiter)
                 """
         }
         
         return (header, headerDelimiter)
     }

    public func generateWorkflow(for repo: RepoDetails) -> Output? {
        let supportedCompilers = repo.settings.enabledCompilers
        var compilersToTest = supportedCompilers
        if repo.settings.options.contains("firstlast") && (supportedCompilers.count > 0) {
            compilersToTest = [supportedCompilers.first!]
            let last = supportedCompilers.last!
            if !compilersToTest.contains(last) {
                compilersToTest.append(last)
            }
        }
        
        let platforms = repo.settings.enabledPlatforms

        let source = generateYAML(for: repo, platforms: platforms, compilers: compilersToTest)
        let (header, delimiter) = generateHeader(for: repo, platforms: platforms, compilers: supportedCompilers)
        
        guard let data = source.data(using: .utf8) else { return nil }
        return Output(repo: repo, source: source, data: data, header: header, delimiter: delimiter)
    }
    
}
